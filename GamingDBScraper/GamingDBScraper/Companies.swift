//
//  Companies.swift
//  GamingDBScraper
//
//  Created by Matthew Ruston on 10/21/17.
//  Copyright Â© 2017 MattRuston. All rights reserved.
//

import Foundation

//"published"
//"developed"
fileprivate let companyAttributes: [String] =
    ["id",
        "name",
        "logo",
        "website",
        "country",
        "description"
    ]

fileprivate let justNintendo = [70]
fileprivate let companiesInTop1000Games = [1, 2, 3, 4, 5, 6, 7, 8, 9, 12298, 10, 12, 12300, 4107, 15, 4112, 17, 18, 19, 6163, 21, 20, 23, 24, 6169, 26, 27, 28, 29, 30, 25, 4120, 4123, 4124, 12323, 36, 37, 38, 39, 4127, 41, 42, 4133, 44, 45, 47, 48, 50, 51, 4148, 53, 55, 56, 11, 58, 59, 12348, 61, 60, 10303, 10304, 6208, 66, 63, 68, 64, 70, 71, 72, 73, 6218, 74, 2121, 10319, 82, 4178, 12373, 85, 93, 94, 2145, 97, 12387, 99, 100, 101, 2055, 104, 106, 108, 110, 111, 112, 2161, 113, 115, 117, 120, 122, 2171, 2172, 126, 128, 129, 4226, 130, 10377, 139, 2187, 141, 12428, 143, 144, 145, 146, 147, 148, 12437, 150, 151, 10392, 152, 154, 12444, 157, 159, 161, 163, 164, 167, 168, 169, 170, 175, 176, 184, 6330, 10426, 4284, 189, 8381, 191, 192, 12481, 2241, 195, 4291, 197, 196, 193, 2248, 200, 12487, 203, 204, 205, 2245, 208, 213, 2262, 4113, 215, 4114, 221, 222, 224, 2275, 227, 229, 10469, 4328, 10474, 238, 240, 6387, 244, 245, 8437, 4119, 248, 2297, 250, 251, 252, 8444, 4121, 255, 8448, 256, 6393, 4122, 4356, 8452, 8454, 4357, 6407, 261, 263, 10503, 6414, 273, 4125, 277, 279, 280, 4126, 283, 6429, 10527, 290, 291, 4128, 12579, 294, 2343, 2344, 2345, 295, 301, 302, 10541, 305, 306, 307, 308, 310, 311, 312, 8505, 314, 315, 318, 319, 12608, 321, 8515, 4420, 324, 326, 327, 328, 323, 332, 2380, 334, 341, 4440, 348, 2397, 8542, 353, 356, 10596, 2406, 360, 2410, 364, 365, 2417, 4466, 4468, 2421, 374, 377, 12666, 378, 2428, 4474, 2431, 384, 385, 2438, 392, 2113, 395, 396, 12685, 6542, 398, 400, 401, 6545, 2450, 2449, 403, 406, 407, 6549, 8601, 2453, 8595, 410, 413, 414, 6560, 8224, 421, 423, 426, 2474, 428, 431, 433, 434, 2483, 8628, 437, 438, 439, 2488, 440, 435, 2482, 2492, 10685, 445, 2493, 444, 449, 2497, 10692, 454, 458, 461, 8656, 465, 2512, 468, 469, 12758, 2518, 12763, 482, 486, 493, 2542, 498, 2548, 4598, 4602, 507, 12797, 510, 517, 12808, 8714, 2575, 2576, 4626, 533, 536, 12830, 543, 12833, 547, 552, 2603, 555, 10798, 559, 10803, 566, 10809, 4672, 4673, 578, 579, 10820, 10821, 8772, 591, 593, 10834, 594, 10836, 4693, 2648, 10296, 608, 12901, 614, 617, 620, 2670, 2673, 2675, 4726, 630, 2678, 4729, 634, 10875, 2684, 636, 637, 12927, 639, 638, 12931, 4740, 645, 646, 12935, 649, 651, 652, 4751, 659, 663, 665, 680, 4777, 2729, 684, 4780, 694, 697, 2746, 8891, 4796, 700, 702, 2751, 2748, 707, 711, 4809, 717, 722, 13012, 2776, 13020, 4834, 739, 747, 748, 753, 754, 755, 756, 13041, 761, 762, 765, 766, 769, 771, 773, 4872, 2827, 782, 13071, 783, 789, 790, 791, 795, 797, 798, 799, 800, 4895, 2850, 803, 4897, 9005, 6957, 817, 818, 822, 823, 824, 825, 13122, 4930, 2884, 837, 13126, 834, 840, 841, 2889, 13131, 4940, 4936, 6988, 847, 851, 852, 6997, 854, 9043, 857, 858, 7003, 859, 2909, 862, 13151, 864, 7010, 866, 13158, 7016, 873, 2921, 2929, 884, 885, 893, 894, 2941, 896, 7041, 2946, 899, 4996, 902, 4998, 903, 9097, 906, 907, 908, 11149, 910, 905, 13201, 2962, 9107, 915, 2963, 918, 919, 917, 7066, 926, 928, 13217, 7079, 936, 7080, 937, 11181, 943, 5040, 2992, 946, 13235, 947, 2997, 13238, 13234, 5048, 5049, 953, 955, 5052, 7097, 7093, 954, 3010, 965, 3020, 13261, 3023, 3024, 3031, 3032, 5079, 3037, 5093, 3046, 1002, 1003, 3050, 1005, 13293, 9199, 1009, 1010, 7156, 1012, 1013, 13304, 11259, 1021, 1022, 13311, 3072, 3073, 1023, 1030, 3078, 1037, 3087, 1044, 1048, 5145, 1053, 1056, 1057, 1058, 1059, 1060, 11301, 11302, 5157, 1064, 1065, 1062, 3115, 13355, 3109, 3118, 3119, 7215, 3121, 1074, 13363, 13364, 5181, 9281, 5187, 5188, 1097, 11339, 3150, 1103, 1111, 1113, 3162, 7260, 5212, 5213, 1119, 7263, 13409, 7261, 9317, 1125, 13432, 11385, 11387, 9339, 13453, 9357, 1169, 13459, 9364, 13460, 13463, 7320, 13465, 13467, 11420, 13469, 13471, 5283, 13477, 1190, 13481, 9385, 13486, 13488, 13495, 1210, 13501, 5310, 13502, 1217, 1219, 243, 1224, 1225, 13513, 13515, 13514, 13518, 13523, 13524, 1241, 1242, 13531, 1246, 13539, 7397, 1260, 9453, 1271, 5372, 13579, 7438, 7445, 7452, 11558, 1319, 11559, 3369, 7466, 13614, 9520, 13622, 1335, 9529, 1339, 11584, 9537, 11586, 1348, 7501, 13648, 5456, 13651, 1365, 1366, 5462, 9567, 1380, 3431, 9580, 1393, 1394, 9586, 1396, 1398, 9595, 1405, 1414, 1415, 9608, 9607, 1418, 11656, 11659, 7201, 11662, 1424, 7570, 7571, 1432, 1433, 11674, 5529, 11682, 1443, 1447, 6394, 5547, 11701, 1464, 1466, 1472, 1493, 1494, 11740, 1505, 11759, 1521, 1522, 11764, 9719, 1527, 1532, 1552, 1565, 1568, 11816, 5676, 1617, 7778, 1640, 1641, 3690, 9836, 3697, 3701, 5750, 1663, 1666, 9873, 5780, 11925, 11924, 5792, 5793, 1702, 3753, 7850, 1715, 9911, 11960, 7867, 3775, 11970, 1733, 11980, 11981, 1743, 11990, 9944, 9946, 7899, 9949, 7902, 1760, 1766, 7912, 3821, 3823, 3824, 9969, 9970, 7923, 12033, 12036, 3845, 1803, 12048, 10001, 12049, 12052, 7964, 1822, 10019, 7974, 10023, 12075, 7983, 1843, 3903, 3906, 5961, 5962, 1865, 5966, 3928, 8024, 10075, 8032, 12133, 8038, 1899, 5996, 8045, 10094, 8046, 10100, 3958, 1913, 6019, 1926, 6026, 3989, 6043, 12189, 12197, 8105, 4009, 6065, 6066, 6068, 1975, 6072, 12217, 6079, 4034, 8131, 8134, 8136, 12234, 6096, 6100, 6103, 6113, 6114, 6115, 10212, 402, 6125, 8173, 2034, 12276, 4090, 4091, 6141]

fileprivate let companiesInPlatforms = [128, 1799, 13460, 9372, 4639, 10922, 2348, 45, 2350, 1453, 2104, 56, 190, 1474, 70, 2123, 13515, 3151, 82, 13524, 2391, 99, 12004, 2406, 2407, 2408, 617, 2795, 2796, 366, 112, 2417, 1138, 1137, 10356, 2421, 2420, 11383, 11384, 2426, 9723, 1277]

//MARK: - public functions

func getCompanies() {
    
    var allCompanies = Set<Int>(companiesInTop1000Games)
    for company in companiesInPlatforms {
        allCompanies.insert(company)
    }
    
    for company in allCompanies {
        downloadCompanyData(company)
        let delay = arc4random_uniform(2) + 1
        sleep(delay)
    }
}


//MARK: - Private functions

fileprivate func downloadCompanyData(_ id: Int) {
    guard let request = request(for: "/companies/\(id)") else {
        return
    }
    
    print("Requesting company: \(id)")
    makeSynchronousRequest(request) { (data) in
        guard let newData = filterCompanyData(data) else {
            print("ERROR: Unable to get filtered Data")
            return
        }
        
        save(data: newData, to: "companies.json")
    }
}


fileprivate func filterCompanyData(_ data: Data) -> Data? {
    let filteredData = filterData(data) { (json) -> (Any) in
        guard let typedJson = (json as? [[String: Any]])?.first else {
            print("Error: Json in unknown format")
            return json
        }
        
        var filteredJson = typedJson.filter({ (key, _) -> Bool in
            return companyAttributes.contains(key)
        })
        
        var allGames: Set<Int> = []
        
        if let publishedGames = typedJson["published"] as? [Int] {
            for game in publishedGames {
                allGames.insert(game)
            }
        }
        
        if let developedGames = typedJson["developed"] as? [Int] {
            for game in developedGames {
                allGames.insert(game)
            }
        }
        
        let games = Array<Int>(allGames)
        if games.count > 0 {
            filteredJson["games"] = games
        }
        
        return filteredJson
    }
    
    return filteredData
}

