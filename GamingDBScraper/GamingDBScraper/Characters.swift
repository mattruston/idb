//
//  Characters.swift
//  GamingDBScraper
//
//  Created by Matthew Ruston on 10/22/17.
//  Copyright Â© 2017 MattRuston. All rights reserved.
//

import Foundation

fileprivate let characterAttributes: [String] =
    [
        "id",
        "name",
        "mug_shot",
        "gender",
        "games",
        "species"
]

fileprivate let justMario = [1074]

fileprivate let topGames = [27421, 27081, 28204, 26758, 28540, 25657, 31558, 11161, 11567, 7329, 36926, 21063, 9061, 25300, 36813, 46451, 18623, 7202, 26401, 28465, 22425, 17001, 10039, 36792, 25076, 16309, 36872, 39755, 27924, 19290, 22470, 26163, 16468, 28028, 19333, 13189, 36836, 19376, 21642, 11800, 1905, 28552, 19934, 18822, 17354, 26766, 26709, 22486, 29173, 22472, 6732, 19785, 36950, 27266, 19301, 1942, 26145, 18167, 22422, 47823, 29004, 9760, 19289, 36897, 7342, 19847, 25646, 19561, 9789, 23345, 22426, 27741, 13196, 23212, 18857, 26563, 26223, 26192, 18918, 23732, 26772, 36952, 11233, 27314, 65832, 33603, 22423, 11296, 68335, 1877, 25222, 14363, 36794, 26470, 11156, 43130, 7346, 36543, 11806, 7603, 38045, 22418, 37030, 26710, 68455, 36608, 36662, 36962, 22406, 19174, 6958, 2015, 1020, 44076, 848, 18387, 17000, 117, 18859, 25905, 27789, 26769, 1009, 24048, 10239, 55289, 19083, 54789, 12511, 3025, 22480, 27094, 12632, 12517, 7331, 23867, 25217, 11582, 28380, 28154, 22399, 17446, 11419, 11588, 26848, 37059, 1595, 21604, 236, 14763, 26197, 2558, 58479, 22690, 7843, 9927, 20918, 19448, 8968, 54842, 28029, 7364, 472, 23198, 21062, 26856, 18320, 27433, 27725, 4843, 37067, 26914, 22485, 25311, 22471, 15911, 19698, 11133, 28815, 7599, 7350, 12579, 11679, 1029, 12198, 28751, 1985, 19545, 26239, 12328, 29730, 1352, 19082, 55077, 7344, 68463, 434, 36781, 5601, 8173, 11171, 7351, 55935, 1593, 19531, 11137, 3230, 9630, 640, 932, 11208, 28414, 11169, 19341, 54443, 1939, 2918, 40524, 41895, 59248, 359, 37140, 121, 16999, 55752, 68287, 127, 19560, 7046, 24512, 1372, 11550, 2933, 10403, 3277, 19077, 3019, 26268, 35626, 9199, 18090, 9174, 67203, 25211, 26841, 22481, 40470, 6801, 6036, 10760, 68490, 6705, 73, 36534, 15, 8773, 36986, 55236, 2963, 74, 53387, 13558, 2274, 9806, 18398, 1802, 1887, 9066, 18866, 37016, 71387, 533, 732, 16, 1219, 7349, 1513, 18797, 6361, 565, 68142, 1970, 26761, 12264, 11118, 115, 12982, 37022, 17469, 54547, 12519, 7621, 19562, 11667, 7218, 1279, 7360, 14389, 22436, 39244, 11157, 2909, 7609, 7406, 28148, 28862, 19541, 59591, 7334, 1011, 1026, 4786, 14587, 9730, 15830, 27686, 35283, 68316, 13524, 302, 8187, 14713, 36793, 27239, 24974, 11655, 12597, 11186, 14593, 9633, 51485, 11198, 11631, 16513, 22421, 43115, 54999, 26196, 19331, 1266, 55036, 19222, 53359, 1879, 1906, 51978, 1164, 9600, 72, 500, 8965, 3102, 27088, 30229, 36847, 36957, 26193, 32902, 538, 1062, 6, 233, 55803, 7181, 13163, 27209, 128, 51406, 28951, 75, 866, 37063, 11253, 22465, 1904, 76, 5, 1078, 37094, 2002, 10160, 26855, 7709, 68311, 113, 501, 25951, 3022, 7323, 25653, 2155, 12263, 28049, 20, 8263, 47158, 19012, 109, 46450, 51525, 18968, 14523, 11003, 7100, 493, 28856, 2031, 5503, 19459, 56873, 17269, 529, 731, 12571, 3042, 2971, 10739, 25205, 733, 10148, 19457, 284, 40, 68278, 43, 481, 1070, 44242, 27910, 3212, 22469, 21, 6414, 1979, 621, 41064, 5606, 19470, 37083, 68391, 3152, 21429, 1081, 530, 17470, 289, 18, 11492, 142, 512, 37151, 19350, 2990, 1911, 19441, 1183, 126, 41, 1262, 1443, 15708, 27242, 18088, 11529, 622, 343, 9498, 15707, 43097, 54639, 7313, 64204, 7444, 10919, 7440, 4754, 68442, 55166, 74131, 8288, 9727, 21390, 327, 2136, 6707, 2114, 68485, 2993, 847, 832, 2025, 120, 17447, 2262, 231, 11797, 427, 39, 68379, 3035, 902, 1983, 431, 54612, 53358, 1875, 1968, 22, 132, 1074, 375, 25708, 26007, 16326, 7386, 13183, 2903, 52198, 1073, 26194, 673, 19130, 5602, 11499, 7631, 15894, 18811, 8729, 24428, 24491, 141, 536, 987, 1331, 1907, 1941, 974, 28753, 25921, 10898, 19519, 14729, 14760, 5328, 358, 1184, 51991, 2113, 3075, 116, 11397, 13215, 4, 68381, 44191, 25213, 5082, 29152, 37092, 59849, 59848, 2985, 56, 184, 1342, 27922, 14362, 14741, 10736, 8767, 1077, 22439, 123, 39047, 5589, 11602, 44544, 418, 478, 26765, 36651, 10740, 28966, 25068, 37088, 547, 498, 7789, 41828, 1981, 9898, 623, 78, 114, 9192, 80, 891, 2750, 65829, 1871, 28213, 59, 71, 1105, 8196, 26391, 19516, 74390, 1216, 7394, 26764, 13182, 27395, 18908, 3192, 55761, 2939, 6985, 13171, 960, 545, 625, 52555, 539, 27217, 1068, 7878, 1267, 1318, 16992, 18812, 54662, 67557, 13, 55590, 3278, 3968, 1121, 27087, 426, 1082, 43022, 2368, 8197, 230, 1221, 19455, 38780, 10501, 6930, 26381, 19539, 19542, 1334, 11162, 27436, 27531, 2552, 27353, 18819, 54725, 74405, 19474, 23835, 49414, 1368, 2003, 23314, 26166, 380, 19297, 11313, 10965, 7533, 3162, 2132, 18704, 12127, 18927, 11134, 7667, 55308, 3182, 55888, 1339, 290, 16287, 483, 52745, 23236, 125, 98, 1369, 376, 1910, 60, 2899, 28706, 38, 239, 44087, 19456, 19564, 34667, 18074, 36594, 2, 22482, 72520, 55689, 2955, 7194, 7292, 559, 1064, 1491, 63734, 36856, 22463, 39046, 986, 616, 63718, 17451, 68283, 379, 1022, 10209, 26820, 364, 67449, 11119, 54843, 3087, 44129, 3048, 19, 6521, 885, 8787, 480, 9047, 65503, 1991, 22490, 6292, 23180, 1341, 68, 3097, 65764, 2350, 5508, 374, 1036, 2261, 7477, 11346, 19409, 19453, 19565, 25683, 11071, 27717, 4756, 12787, 22478, 54712, 68445, 55028, 19809, 24436, 5304, 873, 8367, 1048, 486, 23248, 10121, 537, 990, 51486, 370, 9509, 378, 1936, 421, 36515, 3225, 2687, 362, 3231, 33454, 8347, 13166, 1338, 1039, 489, 549, 551, 6032, 124, 37, 111, 338, 52717, 1111, 1108, 118, 8652, 1030, 1384, 37060, 11182, 11563, 25625, 10232, 27663, 36623, 12275, 18200, 2934, 24905, 730, 1122, 260, 312, 499, 41623, 23331, 39045, 934, 38025, 20945, 86, 11170, 51995, 8259, 61, 2207, 1090, 20122, 28549, 25837, 11423, 7570, 36284, 15851, 1265, 27403, 26757, 26870, 28105, 7706, 17023, 12633, 8905, 14390, 424, 41348, 22483, 19164, 68477, 3189, 74318, 22819, 25554, 7205, 7327, 1377, 153, 836, 1128, 57002, 16315, 534, 556, 570, 26917, 2001, 521, 58266, 2276, 39044, 5574, 2935, 2853, 28164, 1107, 45095, 246, 19407, 28354, 20228, 25838, 11283, 26170, 7491, 26386, 8258, 1271, 6452, 28125, 2547, 2129, 28207, 14378, 57436, 363, 366, 1556, 9740, 19808, 3002, 26472, 11590, 6632, 23733, 6044, 13207, 27019, 193, 837, 50788, 322, 306, 11593, 2603, 6075, 21592, 22357, 517, 96, 966, 53, 5587, 890, 897, 2617, 53833, 61638, 247, 11, 12503, 25656, 4643, 20065, 20313, 6803, 7860, 10962, 7610, 28311, 1270, 1354, 27676, 26948, 27936, 14206, 28096, 2538, 3222, 16173, 16991, 14404, 18829, 22477, 11270, 68334, 68456, 3173, 56001, 44202, 44158, 14, 11790, 27135, 8492, 10681, 7339, 21453, 49118, 965, 5319, 293, 27082, 27238, 15862, 1520, 440, 28859, 52133, 22029, 22407, 6247, 22753, 23297, 22356, 23210, 504]


//MARK: - public functions

func getCharacters() {
    
    var charactersDone = Set<Int>()
    
    for game in topGames {
        let characters = getCharacters(for: game)
        for character in characters {
            if charactersDone.contains(character) == false {
                charactersDone.insert(character)
                
                downloadCharacterData(character)
                let delay = arc4random_uniform(2) + 1
                sleep(delay)
            }
        }
    }
}


//MARK: - Private functions

fileprivate func getCharacters(for game: Int) -> [Int] {
    guard let request = request(for: "/characters/?filter[games][in]=\(game)") else {
        return []
    }
    
    print("Getting characters for game: \(game)")
    return getPage(with: request)
}

fileprivate func downloadCharacterData(_ id: Int) {
    guard let request = request(for: "/characters/\(id)") else {
        return
    }
    
    print("Requesting character: \(id)")
    makeSynchronousRequest(request) { (data) in
        guard let newData = filterCharacterData(data) else {
            print("ERROR: Unable to get filtered Data")
            return
        }
        
        save(data: newData, to: "characters.json")
    }
}


fileprivate func filterCharacterData(_ data: Data) -> Data? {
    let filteredData = filterData(data) { (json) -> (Any) in
        guard let typedJson = (json as? [[String: Any]])?.first else {
            print("Error: Json in unknown format")
            return json
        }
        
        let filteredJson = typedJson.filter({ (key, _) -> Bool in
            return characterAttributes.contains(key)
        })
        
        return filteredJson
    }
    
    return filteredData
}
